---
- name: Node run
  hosts: "{{ target }}"
  become: yes

  tasks:
    - name: Set main variables
      ansible.builtin.set_fact:
        moniker: beething
        wallet_addr: ""
        valoper_addr: ""
        keypasswd: "{{ carbon_keypasswd }}"
        chain_id: carbon-1
        project_name: carbon
        external_address: 23.88.77.188
        external_port: 20005
        cosmos_data_dir: /root/.carbon
        cosmos_node_binary: carbond
        genesis_url: https://media.githubusercontent.com/media/Switcheo/carbon-bootstrap/master/carbon-1/genesis.json
        peers_url: https://raw.githubusercontent.com/Switcheo/carbon-bootstrap/master/carbon-1/PEERS

    - name: Set config.toml variables
      ansible.builtin.set_fact:
        timeout_commit: 1s
        cors_allowed_origins: '["*"]'
        addr_book_strict: false
        db_backend: cleveldb
        seeds: ""
        log_level: warn

    - name: Set app.toml variables
      ansible.builtin.set_fact:
        minimum_gas_prices: "0ucarbon"
        pruning: custom
        pruning_keep_recent: 100
        pruning_keep_every: 10000
        pruning_interval: 10
        snapshot_interval: 10000
        api_enable: true
        grpc_enable: true
        grpc_web_enable: true

    - name: Set update control variables
      ansible.builtin.set_fact:
        binary_version: 2.1.1
        rebuild: False
        init: False
        config: False
        run_deps: False
        migrations: False

    - name: "Speed up making directories"
      shell: |
        mkdir -p {{ NODES_DIR }}/{{ project_name }}
        mkdir -p {{ NODES_DATA_DIR }}/{{ project_name}}/node
        mkdir -p {{ NODES_DATA_DIR }}/{{ project_name}}/node/migrations
        mkdir -p {{ NODES_DATA_DIR }}/{{ project_name}}redis
        mkdir -p {{ NODES_DATA_DIR }}/{{ project_name}}/pg

    - name: Create a network
      community.docker.docker_network:
        name: "{{ project_name }}"

    - name: Write dockerfile
      copy:
        dest: "{{ NODES_DIR }}/{{ project_name }}/Dockerfile"
        content: |
          FROM debian:bullseye
          RUN mkdir -p /opt/src
          WORKDIR /opt/src
          RUN apt update && apt install wget jq build-essential cmake -y
          RUN wget https://github.com/google/leveldb/archive/1.23.tar.gz && \
            tar -zxvf 1.23.tar.gz && \
            wget https://github.com/google/googletest/archive/release-1.11.0.tar.gz && \
            tar -zxvf release-1.11.0.tar.gz && \
            mv googletest-release-1.11.0/* leveldb-1.23/third_party/googletest && \
            wget https://github.com/google/benchmark/archive/v1.5.5.tar.gz && \
            tar -zxvf v1.5.5.tar.gz && \
            mv benchmark-1.5.5/* leveldb-1.23/third_party/benchmark && \
            cd leveldb-1.23 && \
            mkdir -p build && \
            cd build && \
            cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && \
            cmake --build . && \
            cp -P libleveldb.so* /usr/local/lib/ && \
            ldconfig && \
            cd .. && \
            cp -r include/leveldb /usr/local/include/ && \
            cd .. && \
            rm -rf benchmark-1.5.5/ && \
            rm -f v1.5.5.tar.gz && \
            rm -rf googletest-release-1.11.0/ && \
            rm -f release-1.11.0.tar.gz && \
            rm -rf leveldb-1.23/ && \
            rm -f 1.23.tar.gz
          RUN wget https://github.com/Switcheo/carbon-bootstrap/releases/download/v{{ binary_version }}/carbond{{binary_version}}-mainnet.linux-amd64.tar.gz
          RUN tar -xzf carbond{{binary_version}}-mainnet.linux-amd64.tar.gz
          RUN chmod +x .*
          RUN cp carbond /usr/local/bin/
      when: rebuild

    - name: Build image
      command: docker build -f Dockerfile -t {{ project_name}}:{{binary_version}} .
      args:
        chdir: "{{ NODES_DIR }}/{{ project_name}}"
      when: rebuild

    - name: Run CLI container
      docker_container:
        name: "{{ project_name}}-cli"
        image: "{{ project_name}}:{{binary_version}}"
        command: ["tail", "-f", "/dev/null"]
        env:
          daemon_name: "{{ cosmos_node_binary}}"
          wallet_addr: "{{ wallet_addr}}"
          valoper_addr: "{{ valoper_addr}}"
          keypasswd: "{{ keypasswd }}"
          REDIS_URL: "redis://{{ project_name}}-redis:6379"
          POSTGRES_URL: "postgresql://carbon:carbon@{{ project_name}}-postgres:5432/carbon"
        networks:
          - name: "{{ project_name}}"
        restart_policy: unless-stopped
        pull: false
        state: started
        volumes:
          - "{{ NODES_DATA_DIR }}/{{ project_name}}/node:{{ cosmos_data_dir }}:rw"

    - name: Init chain
      community.docker.docker_container_exec:
        container: "{{ project_name}}-cli"
        command: /bin/bash -c "{{cosmos_node_binary}} init beething -o"
      register: result
      when: init

    - name: Get peers data
      ansible.builtin.uri:
        url: "{{ peers_url }}"
        return_content: yes
      register: seeds_data
      when: config

    - name: Set peers
      ansible.builtin.set_fact:
        seeds: "{{ seeds_data.content | trim }}"
      when: config

    - name: Install config.toml
      ansible.builtin.template:
        src: config.toml.tpl
        dest: "{{ NODES_DATA_DIR }}/{{ project_name}}//node/config/config.toml"
      when: config

    - name: Install client.toml
      ansible.builtin.template:
        src: client.toml.tpl
        dest: "{{ NODES_DATA_DIR }}/{{ project_name}}/node/config/client.toml"
      when: config

    - name: Install app.toml
      ansible.builtin.template:
        src: app.toml.tpl
        dest: "{{ NODES_DATA_DIR }}/{{ project_name}}/node/config/app.toml"
      when: config

    - name: Download genesis
      ansible.builtin.get_url:
        url: "{{ genesis_url }}"
        dest: "{{ NODES_DATA_DIR }}/{{ project_name}}/node/config/genesis.json"
      when: config

    - name: Run redis
      docker_container:
        name: "{{ project_name}}-redis"
        image: "redis:7.0.4-bullseye"
        networks:
          - name: "{{ project_name}}"
        restart_policy: unless-stopped
        pull: false
        state: started
      when: run_deps

    - name: Run pg
      docker_container:
        name: "{{ project_name}}-postgres"
        image: "postgres:13-bullseye"
        env:
          POSTGRES_DB: carbon
          POSTGRES_USER: carbon
          POSTGRES_PASSWORD: carbon
          PGDATA: /var/lib/postgresql/data
        networks:
          - name: "{{ project_name}}"
        restart_policy: unless-stopped
        pull: false
        state: started
        volumes:
          - "{{ NODES_DATA_DIR }}/{{ project_name}}/pg:/var/lib/postgresql/data:rw"
      when: run_deps

    - name: Run migrations
      community.docker.docker_container_exec:
        container: "{{ project_name}}-cli"
        command: /bin/bash -c "{{cosmos_node_binary}} migrations"
      when: migrations

    - name: Run persist-genesis
      community.docker.docker_container_exec:
        container: "{{ project_name}}-cli"
        command: /bin/bash -c "{{cosmos_node_binary}} persist-genesis"
      when: migrations
    # --persistence
    - name: Run node
      docker_container:
        name: "{{ project_name}}-node"
        image: "{{ project_name}}:{{binary_version}}"
        command: |
          {{ cosmos_node_binary }}
          start
          --db-api
        env:
          REDIS_URL: "redis://{{ project_name}}-redis:6379"
          POSTGRES_URL: "postgresql://carbon:carbon@{{ project_name}}-postgres:5432/carbon"
        networks:
          - name: "{{ project_name}}"
        published_ports:
          - "0.0.0.0:{{ external_port }}:26656"
        restart_policy: unless-stopped
        pull: false
        state: started
        volumes:
          - "{{ NODES_DATA_DIR }}/{{ project_name}}/node:{{ cosmos_data_dir }}:rw"
